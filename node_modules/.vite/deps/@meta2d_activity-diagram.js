import {
  rectangle
} from "./chunk-GB4GNN46.js";
import "./chunk-7D4SUZUM.js";

// node_modules/@meta2d/activity-diagram/src/final.js
function activityFinal(ctx, pen) {
  var _a = pen.calculative.worldRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  ctx.beginPath();
  ctx.ellipse(x + width / 2, y + height / 2, width / 2, height / 2, 0, 0, Math.PI * 2);
  ctx.stroke();
  ctx.beginPath();
  ctx.fillStyle = ctx.strokeStyle;
  ctx.ellipse(x + width / 2, y + height / 2, width / 4, height / 4, 0, 0, Math.PI * 2);
  ctx.fill();
}

// node_modules/@meta2d/activity-diagram/src/swimlaneH.js
function swimlaneH(pen, ctx) {
  var path = !ctx ? new Path2D() : ctx;
  var _a = pen.calculative.worldRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, ey = _a.ey;
  var lineLeft = pen.calculative.lineLeft || 0.08;
  var wr = pen.calculative.borderRadius || 0, hr = wr;
  if (wr < 1) {
    wr = width * wr;
    hr = height * wr;
  }
  var r = wr < hr ? wr : hr;
  if (width < 2 * r) {
    r = width / 2;
  }
  if (height < 2 * r) {
    r = height / 2;
  }
  path.moveTo(x + r, y);
  path.arcTo(x + width, y, x + width, y + height, r);
  path.arcTo(x + width, y + height, x, y + height, r);
  path.arcTo(x, y + height, x, y, r);
  path.arcTo(x, y, x + width, y, r);
  path.closePath();
  path.moveTo(x + lineLeft * width, y);
  path.lineTo(x + lineLeft * width, ey);
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/activity-diagram/src/swimlaneV.js
function swimlaneV(pen, ctx) {
  var path = !ctx ? new Path2D() : ctx;
  var _a = pen.calculative.worldRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, ex = _a.ex;
  var lineTop = pen.calculative.lineTop || 0.08;
  var wr = pen.calculative.borderRadius || 0, hr = wr;
  if (wr < 1) {
    wr = width * wr;
    hr = height * hr;
  }
  var r = wr < hr ? wr : hr;
  if (width < 2 * r) {
    r = width / 2;
  }
  if (height < 2 * r) {
    r = height / 2;
  }
  path.moveTo(x + r, y);
  path.arcTo(x + width, y, x + width, y + height, r);
  path.arcTo(x + width, y + height, x, y + height, r);
  path.arcTo(x, y + height, x, y, r);
  path.arcTo(x, y, x + width, y, r);
  path.closePath();
  path.moveTo(x, y + lineTop * height);
  path.lineTo(ex, y + lineTop * height);
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/activity-diagram/src/register.js
function activityDiagram() {
  return {
    forkV: rectangle,
    forkH: rectangle,
    swimlaneH,
    swimlaneV
  };
}
function activityDiagramByCtx() {
  return {
    activityFinal
  };
}
export {
  activityDiagram,
  activityDiagramByCtx,
  activityFinal,
  swimlaneH,
  swimlaneV
};
//# sourceMappingURL=@meta2d_activity-diagram.js.map
