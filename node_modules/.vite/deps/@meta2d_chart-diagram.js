import {
  deepClone,
  deepSetValue,
  getter,
  register,
  setElemPosition
} from "./chunk-GB4GNN46.js";
import "./chunk-7D4SUZUM.js";

// node_modules/@meta2d/core/src/utils/time.js
function formatTime(format) {
  var weeks = ["天", "一", "二", "三", "四", "五", "六"];
  var now = /* @__PURE__ */ new Date();
  var year = now.getFullYear();
  var month = now.getMonth() + 1;
  var day = now.getDate();
  var week = now.getDay();
  var hours = now.getHours();
  var minutes = now.getMinutes();
  var seconds = now.getSeconds();
  var fn = new Function("year", "month", "day", "week", "hours", "minutes", "seconds", format ? "return " + format : "return `${year}:${month}:${day} ${hours}:${minutes}:${seconds} 星期${week}`");
  var time = fn(year, month, day, weeks[week], hours, minutes, seconds);
  return time;
}

// node_modules/@meta2d/chart-diagram/src/echarts.js
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ReplaceMode;
(function(ReplaceMode2) {
  ReplaceMode2[ReplaceMode2["Add"] = 0] = "Add";
  ReplaceMode2[ReplaceMode2["Replace"] = 1] = "Replace";
  ReplaceMode2[ReplaceMode2["ReplaceAll"] = 2] = "ReplaceAll";
})(ReplaceMode || (ReplaceMode = {}));
var keyWords = [
  "fontSize",
  "nameGap",
  "margin",
  "width",
  "symbolSize",
  "itemWidth",
  "itemHeight",
  "fontWeight",
  "top",
  "left",
  "right",
  "bottom",
  "zoom",
  "edgeSymbolSize",
  "nodeWidth",
  "nodeGap",
  "distance",
  "length",
  "length2",
  "offsetCenter",
  "size",
  "symbolOffset",
  "padding",
  "barWidth",
  "symbolOffset",
  "shadowOffsetY",
  "shadowOffsetX"
];
function echarts(pen) {
  var _a, _b;
  var echarts2 = globalThis.echarts;
  if (!pen.echarts || !echarts2) {
    return;
  }
  if (typeof pen.echarts === "string") {
    try {
      pen.echarts = JSON.parse(pen.echarts);
    } catch (e) {
    }
  }
  if (!pen.echarts) {
    return;
  }
  keyWords = ((_a = pen.calculative.canvas.store.options.diagramOptions["chart"]) === null || _a === void 0 ? void 0 : _a.keyWords) || keyWords;
  if (!pen.onDestroy) {
    pen.onDestroy = destory;
    pen.onMove = move;
    pen.onResize = resize;
    pen.onRotate = move;
    pen.onValue = value;
    pen.onBeforeValue = beforeValue;
    pen.onBinds = binds;
    pen.onMouseEnter = move;
    pen.onRenderPenRaw = onRenderPenRaw;
  }
  if (!pen.calculative.singleton) {
    pen.calculative.singleton = {};
  }
  var path = new Path2D();
  var worldRect = pen.calculative.worldRect;
  if (!pen.calculative.singleton.div) {
    var div = document.createElement("div");
    div.style.position = "absolute";
    div.style.outline = "none";
    div.style.left = "-9999px";
    div.style.top = "-9999px";
    div.style.width = worldRect.width + "px";
    div.style.height = worldRect.height + "px";
    document.body.appendChild(div);
    (_b = pen.calculative.canvas.externalElements) === null || _b === void 0 ? void 0 : _b.parentElement.appendChild(div);
    setElemPosition(pen, div);
    pen.calculative.singleton.div = div;
    pen.calculative.singleton.echart = echarts2.init(div, pen.echarts.theme);
    pen.calculative.singleton.echartsReady = true;
    if (pen.echarts.geoName && !echarts2.getMap(pen.echarts.geoName)) {
      if (pen.echarts.geoJson) {
        echarts2.registerMap(pen.echarts.geoName, pen.echarts.geoJson);
      } else if (pen.echarts.geoUrl) {
        pen.calculative.singleton.echartsReady = false;
        fetch(pen.echarts.geoUrl).then(function(e) {
          e.text().then(function(data) {
            if (typeof data === "string") {
              try {
                data = JSON.parse(data);
              } catch (_a2) {
              }
            }
            if (data.constructor !== Object && data.constructor !== Array) {
              console.warn("Invalid data:", data);
              return;
            }
            echarts2.registerMap(pen.echarts.geoName, data);
            pen.calculative.singleton.echartsReady = true;
            pen.calculative.singleton.echart.setOption(updateOption(pen.echarts.option, pen.calculative.canvas.store.data.scale), true);
            pen.calculative.singleton.echart.resize();
            setTimeout(function() {
              onRenderPenRaw(pen);
            }, 300);
          });
        });
      }
    }
    if (pen.calculative.singleton.echartsReady) {
      setTimeout(function() {
        pen.calculative.singleton.echart.setOption(updateOption(pen.echarts.option, pen.calculative.canvas.store.data.scale), true);
        setTimeout(function() {
          return onRenderPenRaw(pen);
        }, 300);
      });
    }
  }
  return path;
}
function destory(pen) {
  if (pen.calculative.singleton && pen.calculative.singleton.div) {
    pen.calculative.singleton.div.remove();
    var echarts_1 = globalThis.echarts;
    echarts_1 && echarts_1.dispose(pen.calculative.singleton.echart);
    delete pen.calculative.singleton.div;
    delete pen.calculative.singleton.echart;
  }
}
function move(pen) {
  pen.calculative.singleton.div && setElemPosition(pen, pen.calculative.singleton.div);
}
function resize(pen) {
  if (!pen.calculative.singleton.echart) {
    return;
  }
  var echarts2 = globalThis.echarts;
  setElemPosition(pen, pen.calculative.singleton.div);
  if (pen.echarts.geoName && !echarts2.getMap(pen.echarts.geoName))
    return;
  pen.calculative.singleton.echart.setOption(updateOption(pen.echarts.option, pen.calculative.canvas.store.data.scale), true);
  pen.calculative.singleton.echart.resize();
}
function value(pen) {
  if (!pen.calculative.singleton.echart) {
    return;
  }
  setElemPosition(pen, pen.calculative.singleton.div);
  pen.calculative.singleton.echartsReady && pen.calculative.singleton.echart.setOption(updateOption(pen.echarts.option, pen.calculative.canvas.store.data.scale), true);
}
function beforeValue(pen, value4) {
  if (value4.echarts) {
    var echarts_2 = globalThis.echarts;
    if (value4.echarts.geoName && !echarts_2.getMap(value4.echarts.geoName)) {
      if (value4.echarts.geoJson) {
        echarts_2.registerMap(value4.echarts.geoName, value4.echarts.geoJson);
      } else if (value4.echarts.geoUrl) {
        pen.calculative.singleton.echartsReady = false;
        fetch(value4.echarts.geoUrl).then(function(e) {
          e.text().then(function(data) {
            if (typeof data === "string") {
              try {
                data = JSON.parse(data);
              } catch (_a2) {
              }
            }
            if (data.constructor !== Object && data.constructor !== Array) {
              console.warn("Invalid data:", data);
              return;
            }
            echarts_2.registerMap(value4.echarts.geoName, data);
            pen.calculative.singleton.echartsReady = true;
            pen.onValue(pen);
            return false;
          });
        });
      }
    }
    return value4;
  }
  if (pen.realTimes && pen.realTimes.length) {
    var _a = pen.echarts.option, xAxis_1 = _a.xAxis, yAxis_1 = _a.yAxis;
    var _b = pen.echarts, max_1 = _b.max, replaceMode_1 = _b.replaceMode, timeFormat = _b.timeFormat;
    for (var key in value4) {
      if (key.includes("echarts.option")) {
        var beforeV = getter(pen, key);
        if (Array.isArray(beforeV) && replaceMode_1 === ReplaceMode.Add) {
          beforeV.push(value4[key]);
          if (max_1) {
            beforeV.splice(0, beforeV.length - max_1);
          }
          value4[key] = beforeV;
          var _key = "echarts.option.xAxis.data";
          if (Array.isArray(xAxis_1) && xAxis_1.length) {
            _key = "echarts.option.xAxis.0.data";
          }
          var _value = getter(pen, _key);
          var _time = formatTime(timeFormat || "`${hours}:${minutes}:${seconds}`");
          _value.push(_time);
          if (max_1) {
            _value.splice(0, _value.length - max_1);
          }
          value4[_key] = _value;
        }
      }
    }
    return value4;
  }
  if (!value4.dataX && !value4.dataY) {
    return value4;
  }
  var echarts2 = pen.echarts;
  var max = echarts2.max, replaceMode = echarts2.replaceMode;
  var x = value4.dataX;
  var y = value4.dataY;
  var series = echarts2.option.series;
  var length = series.length;
  var _c = echarts2.option, xAxis = _c.xAxis, yAxis = _c.yAxis;
  if (Array.isArray(xAxis) && xAxis.length > 1) {
    console.warn("echarts 只支持单 x 轴，多 x 轴将被忽略");
  }
  var oneXAxis = Array.isArray(xAxis) ? xAxis[0] : xAxis;
  var oneYAxis = Array.isArray(yAxis) ? yAxis[0] : yAxis;
  if (!replaceMode) {
    if (x) {
      !Array.isArray(x) && (x = [x]);
      var xData = oneXAxis.data;
      xData.push.apply(xData, __spreadArray([], __read(x), false));
      xData.splice(0, xData.length - max);
    }
    if (y) {
      if (length === 1) {
        !Array.isArray(y) && (y = [y]);
        var yData = series[0].data;
        yData.push.apply(yData, __spreadArray([], __read(y), false));
        yData.splice(0, yData.length - max);
      } else {
        series.forEach(function(serie, index) {
          if (!Array.isArray(y[index])) {
            y[index] = [y[index]];
          }
          var yData2 = serie.data;
          yData2.push.apply(yData2, __spreadArray([], __read(y[index]), false));
          yData2.splice(0, yData2.length - max);
        });
      }
    }
  } else if (replaceMode === ReplaceMode.Replace) {
    if (!oneXAxis && !oneYAxis) {
      if (y) {
        if (length === 1) {
          !Array.isArray(y) && (y = [y]);
          y.forEach(function(yItem, index) {
            var part = series[0].data.find(function(part2) {
              return part2.name === yItem.name;
            });
            part && (part.value = yItem.value);
          });
        } else {
          series.forEach(function(serie, index) {
            if (!Array.isArray(y[index])) {
              y[index] = [y[index]];
            }
            y[index].forEach(function(yItem, index2) {
              var part = serie.data.find(function(part2) {
                return part2.name === yItem.name;
              });
              part && (part.value = yItem.value);
            });
          });
        }
      }
    } else if (oneXAxis.type === "category" || oneYAxis.type === "category") {
      if (x && y) {
        var categoryData_1 = oneXAxis.type === "category" ? oneXAxis.data : oneYAxis.data;
        !Array.isArray(x) && (x = [x]);
        !Array.isArray(y) && (y = [y]);
        if (length === 1) {
          y.forEach(function(yItem, index) {
            var xIndex = categoryData_1.indexOf(x[index]);
            series[0].data[xIndex] = yItem;
          });
        } else {
          series.forEach(function(serie, index) {
            y[index].forEach(function(yItem, index2) {
              var xIndex = categoryData_1.indexOf(x[index2]);
              serie.data[xIndex] = yItem;
            });
          });
        }
      }
    }
  } else if (replaceMode === ReplaceMode.ReplaceAll) {
    if (x) {
      oneXAxis.data = x;
      oneXAxis.data.splice(0, oneXAxis.data.length - max);
    }
    if (y) {
      if (length === 1) {
        series[0].data = y;
        series[0].data.splice(0, series[0].data.length - max);
      } else {
        series.forEach(function(serie, index) {
          serie.data = y[index];
          serie.data.splice(0, serie.data.length - max);
        });
      }
    }
  }
  delete value4.dataX;
  delete value4.dataY;
  return Object.assign(value4, { echarts: echarts2 });
}
function binds(pen, values, formItem) {
  if (formItem.key !== "dataY") {
    return;
  }
  var echarts2 = pen.echarts;
  var _a = echarts2.option, xAxis = _a.xAxis, yAxis = _a.yAxis;
  if (Array.isArray(xAxis) && xAxis.length > 1) {
    console.warn("echarts 只支持单 x 轴，多 x 轴将被忽略");
  }
  var oneXAxis = Array.isArray(xAxis) ? xAxis[0] : xAxis;
  var oneYAxis = Array.isArray(yAxis) ? yAxis[0] : yAxis;
  var series = echarts2.option.series;
  if (!oneXAxis && !oneYAxis) {
    var dataY_1 = [];
    if (Array.isArray(series) && series.length === 1) {
      series[0].data.forEach(function(item) {
        var id = formItem.dataIds.find(function(dataId) {
          return dataId.name === item.name;
        }).dataId;
        if (id) {
          var value_1 = values.find(function(value4) {
            return value4.dataId === id;
          });
          if (value_1) {
            dataY_1.push({
              name: item.name,
              value: value_1.value
            });
          }
        }
      });
      return {
        id: pen.id,
        dataY: dataY_1
      };
    } else {
    }
  } else if (oneXAxis.type === "category" || oneYAxis.type === "category") {
    var dataY_2 = [], dataX_1 = [];
    var categoryData = oneXAxis.type === "category" ? oneXAxis.data : oneYAxis.data;
    categoryData === null || categoryData === void 0 ? void 0 : categoryData.forEach(function(category) {
      var id = formItem.dataIds.find(function(dataId) {
        return dataId.name === category;
      }).dataId;
      if (id) {
        var value_2 = values.find(function(value4) {
          return value4.dataId === id;
        });
        if (value_2) {
          dataX_1.push(category);
          dataY_2.push(value_2.value);
        }
      }
    });
    return {
      id: pen.id,
      dataY: dataY_2,
      dataX: dataX_1
    };
  } else if (oneXAxis.type === "time") {
    var dataY_3 = [];
    var now_1 = +/* @__PURE__ */ new Date();
    var hasValue_1 = false;
    series.forEach(function(serie, index) {
      var oneDataY = [];
      var id = formItem.dataIds.find(function(dataId) {
        return dataId.name === serie.name;
      }).dataId;
      if (id) {
        var value_3 = values.find(function(value4) {
          return value4.dataId === id;
        });
        if (value_3) {
          oneDataY.push([now_1, value_3.value]);
          hasValue_1 = true;
        }
      }
      dataY_3[index] = oneDataY;
    });
    if (hasValue_1) {
      dataY_3.forEach(function(oneDataY, index) {
        if (!oneDataY || oneDataY.length === 0) {
          var last = series[index].data[series[index].data.length - 1];
          dataY_3[index] = [[now_1, last[1]]];
        }
      });
    } else {
      return;
    }
    return {
      id: pen.id,
      dataY: dataY_3.length === 1 ? dataY_3[0] : dataY_3
    };
  }
  return;
}
function setEchartsOption(pen, ids, isTime, isYCategory) {
  if (isTime === void 0) {
    isTime = false;
  }
  if (isYCategory === void 0) {
    isYCategory = false;
  }
  if (pen.name !== "echarts") {
    console.warn("当前画笔不是 echarts");
    return;
  }
  var echarts2 = pen.echarts;
  var _a = echarts2.option, xAxis = _a.xAxis, yAxis = _a.yAxis;
  var oneXAxis = Array.isArray(xAxis) ? xAxis[0] : xAxis;
  var oneYAxis = Array.isArray(yAxis) ? yAxis[0] : yAxis;
  var series = echarts2.option.series;
  if (!oneXAxis && !oneYAxis) {
    echarts2.option.legend = {};
    series[0].data = ids.map(function(id) {
      return {
        name: id.name,
        value: 100
        // TODO: 该值为初始值
      };
    });
  } else {
    if (isTime) {
      var yType_1 = series[0].type;
      var now_2 = +/* @__PURE__ */ new Date();
      oneXAxis.type = "time";
      oneXAxis.data = [];
      oneYAxis.type = "value";
      oneYAxis.data = [];
      echarts2.option.legend = {};
      echarts2.option.series = ids.map(function(id) {
        return {
          name: id.name,
          type: yType_1,
          data: [[now_2, 0]]
          // TODO: 初始值
        };
      });
      echarts2.replaceMode = ReplaceMode.Add;
    } else {
      var _b = __read(isYCategory ? [oneYAxis, oneXAxis] : [oneXAxis, oneYAxis], 2), categoryAxis = _b[0], valueAxis = _b[1];
      categoryAxis.type = "category";
      categoryAxis.data = ids.map(function(id) {
        return id.name;
      });
      valueAxis.type = "value";
      valueAxis.data = [];
      series.length = 1;
      series[0].data.length = ids.length;
      echarts2.replaceMode = ReplaceMode.Replace;
    }
  }
  var meta2d = pen.calculative.canvas.parent;
  meta2d.setValue({ id: pen.id, echarts: echarts2 }, { render: false, doEvent: false });
}
function onRenderPenRaw(pen) {
  var _a, _b;
  var img = new Image();
  img.src = (_b = (_a = pen.calculative.singleton) === null || _a === void 0 ? void 0 : _a.echart) === null || _b === void 0 ? void 0 : _b.getDataURL({
    pixelRatio: 2
  });
  pen.calculative.img = img;
}
function updateOption(_option, ratio) {
  var option = deepClone(_option);
  if (option.dataZoom) {
    var props_1 = ["right", "top", "width", "height", "left", "bottom"];
    var _loop_1 = function(i2) {
      option.dataZoom.forEach(function(item) {
        if (!isNaN(item[props_1[i2]])) {
          item[props_1[i2]] *= ratio;
        }
      });
    };
    for (var i = 0; i < props_1.length; i++) {
      _loop_1(i);
    }
  }
  deepSetValue(option, keyWords, ratio);
  return option;
}

// node_modules/@meta2d/chart-diagram/src/highcharts.js
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function highcharts(pen) {
  var _a;
  var Highcharts = globalThis.Highcharts;
  if (!Highcharts) {
    return;
  }
  if (typeof pen.highcharts === "string") {
    try {
      pen.highcharts = JSON.parse(pen.highcharts.option);
    } catch (e) {
    }
  }
  if (!pen.highcharts) {
    return;
  }
  if (!pen.onDestroy) {
    pen.onDestroy = destory2;
    pen.onMove = move2;
    pen.onResize = resize2;
    pen.onRotate = move2;
    pen.onValue = value2;
    pen.onBeforeValue = beforeValue2;
    pen.onRenderPenRaw = onRenderPenRaw2;
  }
  if (!pen.calculative.singleton) {
    pen.calculative.singleton = {};
  }
  var path = new Path2D();
  var worldRect = pen.calculative.worldRect;
  if (!pen.calculative.singleton.div) {
    var div = document.createElement("div");
    div.style.position = "absolute";
    div.style.outline = "none";
    div.style.left = "-9999px";
    div.style.top = "-9999px";
    div.style.width = worldRect.width + "px";
    div.style.height = worldRect.height + "px";
    div.style.minWidth = "100px";
    div.style.minHeight = "100px";
    div.id = pen.id;
    document.body.appendChild(div);
    pen.calculative.singleton.div = div;
    setTimeout(function() {
      pen.calculative.singleton.highchart = Highcharts.chart(pen.id, pen.highcharts.option);
      var xml = pen.calculative.singleton.highchart.getSVG();
      var image = new Image();
      image.src = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(xml)));
      pen.calculative.img = image;
    });
    (_a = pen.calculative.canvas.externalElements) === null || _a === void 0 ? void 0 : _a.parentElement.appendChild(div);
    setElemPosition(pen, div);
  }
  if (pen.calculative.patchFlags && pen.calculative.singleton.div) {
    setElemPosition(pen, pen.calculative.singleton.div);
  }
  return path;
}
function destory2(pen) {
  if (pen.calculative.singleton && pen.calculative.singleton.div) {
    pen.calculative.singleton.div.remove();
    pen.calculative.singleton.highchart.destroy();
    delete pen.calculative.singleton.div;
    delete pen.calculative.singleton.highchart;
  }
}
function move2(pen) {
  if (!pen.calculative.singleton.div) {
    return;
  }
  setElemPosition(pen, pen.calculative.singleton.div);
}
function resize2(pen) {
  if (!pen.calculative.singleton.div) {
    return;
  }
  setElemPosition(pen, pen.calculative.singleton.div);
  setTimeout(function() {
    pen.calculative.singleton.highchart.reflow();
  }, 100);
}
function value2(pen) {
  if (!pen.calculative.singleton.div) {
    return;
  }
  setElemPosition(pen, pen.calculative.singleton.div);
}
function beforeValue2(pen, value4) {
  if (value4.highcharts) {
    var chart = pen.calculative.singleton.highchart;
    chart.update(value4.highcharts.option);
    return value4;
  } else if (!value4.dataX && !value4.dataY) {
    return value4;
  }
  var highcharts2 = pen.highcharts;
  var max = highcharts2.max;
  var x = value4.dataX;
  var y = value4.dataY;
  var length = highcharts2.option.series.length;
  if (!value4.overwrite) {
    var xs_1 = [];
    var ys_1 = null;
    var isCategory_1 = false;
    if (x) {
      if (!Array.isArray(x)) {
        x = [x];
      }
      var xAxis = highcharts2.option.xAxis;
      var xData = Array.isArray(xAxis) ? xAxis[0].categories : xAxis.categories;
      if (xData) {
        xData.push.apply(xData, __spreadArray2([], __read2(x), false));
        xData.splice(0, xData.length - max);
        isCategory_1 = true;
      }
      xs_1 = __spreadArray2([], __read2(x), false);
    }
    if (y) {
      if (length === 1) {
        if (!Array.isArray(y)) {
          y = [y];
        }
        ys_1 = [y];
      } else {
        ys_1 = [];
        highcharts2.option.series.forEach(function(serie, index) {
          if (!Array.isArray(y[index])) {
            y[index] = [y[index]];
          }
          ys_1.push(y[index]);
        });
      }
    }
    if (ys_1) {
      var chart = pen.calculative.singleton.highchart;
      chart.series.forEach(function(serie, index) {
        ys_1[index].forEach(function(y2, index2) {
          var shift = false;
          if (max && serie.data.length >= max) {
            shift = true;
          }
          var point = isCategory_1 || xs_1[index2] == void 0 ? y2 : [xs_1[index2], y2];
          serie.addPoint(point, true, shift);
        });
      });
    }
  } else {
    if (x) {
      highcharts2.option.xAxis.categories = x;
      highcharts2.option.xAxis.categories.splice(0, highcharts2.option.xAxis.categories.length - max);
    }
    if (y) {
      if (length === 1) {
        highcharts2.option.series[0].data = y;
        highcharts2.option.series[0].data.splice(0, highcharts2.option.series[0].data.length - max);
      } else {
        highcharts2.option.series.forEach(function(serie, index) {
          serie.data = y[index];
          serie.data.splice(0, serie.data.length - max);
        });
      }
    }
    var chart = pen.calculative.singleton.highchart;
    chart.update(highcharts2.option);
  }
  delete value4.dataX;
  delete value4.dataY;
  delete value4.overwrite;
  return Object.assign(value4, { highcharts: highcharts2 });
}
function onRenderPenRaw2(pen) {
  var _a;
  if (!((_a = pen.calculative) === null || _a === void 0 ? void 0 : _a.singleton)) {
    return;
  }
  var xml = pen.calculative.singleton.highchart.getSVG();
  var image = new Image();
  image.src = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(xml)));
  pen.calculative.img = image;
}

// node_modules/@meta2d/chart-diagram/src/LightningChart.js
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function lightningCharts(pen) {
  var lightningChart = globalThis.lcjs;
  if (!pen.lightningCharts || !lightningChart) {
    return;
  }
  if (typeof pen.lightningCharts === "string") {
    try {
      pen.lightningCharts = JSON.parse(pen.lightningCharts);
    } catch (e) {
    }
  }
  if (!pen.lightningCharts) {
    return;
  }
  if (!pen.onDestroy) {
    pen.onDestroy = destory3;
    pen.onMove = move3;
    pen.onResize = resize3;
    pen.onRotate = move3;
    pen.onValue = value3;
    pen.onRenderPenRaw = onRenderPenRaw3;
  }
  var path = new Path2D();
  var worldRect = pen.calculative.worldRect;
  if (!pen.calculative.singleton) {
    pen.calculative.singleton = {};
  }
  if (!pen.calculative.singleton.div) {
    var div_1 = document.createElement("div");
    div_1.style.position = "absolute";
    div_1.style.outline = "none";
    div_1.style.left = "-9999px";
    div_1.style.top = "-9999px";
    div_1.style.width = worldRect.width + "px";
    div_1.style.height = worldRect.height + "px";
    div_1.id = pen.id;
    document.body.appendChild(div_1);
    pen.calculative.singleton.div = div_1;
    setTimeout(function() {
      setLightningCharts(pen);
    }, 100);
    setTimeout(function() {
      pen.calculative.canvas.externalElements && pen.calculative.canvas.externalElements.parentElement.appendChild(div_1);
      setElemPosition(pen, div_1);
      var img = new Image();
      img.src = pen.calculative.singleton.div.children[0].toDataURL();
      pen.calculative.img = img;
    }, 400);
  }
  if (pen.calculative.patchFlags && pen.calculative.singleton.div) {
    setElemPosition(pen, pen.calculative.singleton.div);
  }
  return path;
}
function colorRgb(bcolor) {
  var color = bcolor.toLowerCase();
  var pattern = /^#([0-9|a-f]{3}|[0-9|a-f]{6})$/;
  var pattern2 = /rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/;
  if (color && pattern.test(color)) {
    if (color.length == 4) {
      color = "#" + color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
    }
    var colorNew = [];
    for (var i = 1; i < 7; i += 2) {
      colorNew.push(parseInt("0x" + color.slice(i, i + 2)));
    }
    return colorNew;
  } else if (color && pattern2.test(color)) {
    var first = color.match(/\(([^)]*)\)/)[1];
    var arr = first.split(",").map(function(item) {
      return parseInt(item);
    });
    return arr;
  }
  return color;
}
function setLightningCharts(pen) {
  var lightningChart = lcjs.lightningChart, PieChartTypes = lcjs.PieChartTypes, LegendBoxBuilders = lcjs.LegendBoxBuilders, SliceLabelFormatters = lcjs.SliceLabelFormatters, Themes = lcjs.Themes, GaugeChartTypes = lcjs.GaugeChartTypes, SolidLine = lcjs.SolidLine, SolidFill = lcjs.SolidFill, ColorRGBA = lcjs.ColorRGBA, UIOrigins = lcjs.UIOrigins, emptyLine = lcjs.emptyLine, AutoCursorModes = lcjs.AutoCursorModes, AxisScrollStrategies = lcjs.AxisScrollStrategies, AxisTickStrategies = lcjs.AxisTickStrategies, UIElementBuilders = lcjs.UIElementBuilders;
  var data = pen.lightningCharts.option.data;
  var title = pen.lightningCharts.option.title || "Title";
  var theme = Themes[pen.lightningCharts.option.theme || "lightNew"];
  pen.calculative.singleton.lightningChart = lightningChart();
  switch (pen.lightningCharts.option.type) {
    case "line":
      var charts_1 = pen.calculative.singleton.lightningChart.ChartXY({
        container: pen.id
      }).setTitle(title);
      data.forEach(function(item) {
        charts_1.addLineSeries().setName(item.name).add(item.data);
      });
      break;
    case "bar":
      var lc_1 = pen.calculative.singleton.lightningChart;
      var barChart = void 0;
      {
        barChart = function(options) {
          var figureThickness = 10;
          var figureGap = figureThickness * 0.25;
          var groupGap = figureGap * 3;
          var groups = [];
          var categories = [];
          var chart = lc_1.ChartXY(options).setTitle(title).setAutoCursorMode(AutoCursorModes.onHover).setMouseInteractions(false).setPadding({ bottom: 30 });
          var axisX = chart.getDefaultAxisX().setMouseInteractions(false).setScrollStrategy(void 0).setTickStrategy(AxisTickStrategies.Empty);
          var axisY = chart.getDefaultAxisY().setMouseInteractions(false).setTitle(pen.lightningCharts.option.yTitle).setInterval(0, 70).setScrollStrategy(AxisScrollStrategies.fitting);
          chart.setAutoCursor(function(cursor) {
            return cursor.disposePointMarker().disposeTickMarkerX().disposeTickMarkerY().setGridStrokeXStyle(emptyLine).setGridStrokeYStyle(emptyLine).setResultTable(function(table) {
              table.setOrigin(UIOrigins.CenterBottom);
            });
          });
          var createSeriesForCategory = function(category) {
            var series = chart.addRectangleSeries();
            series.setCursorResultTableFormatter(function(builder, series2, figure) {
              var entry = {
                name: category.name,
                value: category.data[category.figures.indexOf(figure)]
              };
              return builder.addRow("Department:", entry.name).addRow("# of employees:", String(entry.value));
            });
            return series;
          };
          var legendBox = chart.addLegendBox(LegendBoxBuilders.VerticalLegendBox).setAutoDispose({
            type: "max-width",
            maxWidth: 0.2
          });
          var redraw = function() {
            var e_1, _a;
            var x = 0;
            for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {
              var group = groups[groupIndex];
              var xStart = x;
              try {
                for (var categories_1 = (e_1 = void 0, __values(categories)), categories_1_1 = categories_1.next(); !categories_1_1.done; categories_1_1 = categories_1.next()) {
                  var category = categories_1_1.value;
                  var value_1 = category.data[groupIndex];
                  if (value_1 !== void 0) {
                    var figure = category.figures[groupIndex];
                    figure.setDimensions({
                      x,
                      y: 0,
                      width: figureThickness,
                      height: value_1
                    });
                    x += figureThickness + figureGap;
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (categories_1_1 && !categories_1_1.done && (_a = categories_1.return)) _a.call(categories_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }
              group.tick.setValue((xStart + x - figureGap) / 2);
              x += groupGap;
            }
            axisX.setInterval(-(groupGap + figureGap), x);
          };
          var addGroups = function(names) {
            var e_2, _a;
            var _loop_1 = function(name_12) {
              groups.push({
                name: name_12,
                tick: axisX.addCustomTick(UIElementBuilders.AxisTick).setGridStrokeLength(0).setTextFormatter(function(_) {
                  return name_12;
                })
              });
            };
            try {
              for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {
                var name_1 = names_1_1.value;
                _loop_1(name_1);
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);
              } finally {
                if (e_2) throw e_2.error;
              }
            }
          };
          var addCategory = function(entry) {
            var series = createSeriesForCategory(entry).setName(entry.name);
            entry.figures = entry.data.map(function(value4) {
              return series.add({ x: 0, y: 0, width: 0, height: 0 });
            });
            legendBox.add(series);
            categories.push(entry);
            redraw();
          };
          return {
            addCategory,
            addGroups
          };
        };
      }
      var chart_1 = barChart({
        theme,
        container: pen.id
      });
      chart_1.addGroups(pen.lightningCharts.option.groups);
      var categories_2 = pen.lightningCharts.option.categories;
      data.forEach(function(data2, i) {
        return chart_1.addCategory({
          name: categories_2[i],
          data: data2
        });
      });
      break;
    case "pie":
      var pie_1 = pen.calculative.singleton.lightningChart.Pie({
        theme,
        container: pen.id
      }).setTitle(title).setAnimationsEnabled(true).setMultipleSliceExplosion(true);
      var slices = data.map(function(item) {
        return pie_1.addSlice(item.name, item.value);
      });
      pie_1.setInnerRadius(pen.lightningCharts.option.innerRadius || 0).setLabelFormatter(SliceLabelFormatters.NamePlusRelativeValue);
      pie_1.addLegendBox(LegendBoxBuilders.VerticalLegendBox).setAutoDispose({
        type: "max-width",
        maxWidth: 0.3
      }).add(pie_1);
      break;
    case "gauge":
      var gauge = pen.calculative.singleton.lightningChart.Gauge({
        theme,
        container: pen.id
      }).setTitle(title).setThickness(20).setAngleInterval(pen.lightningCharts.option.startAngle || 225, pen.lightningCharts.option.endAngle || -45);
      var colorArry = colorRgb(pen.lightningCharts.option.background);
      var slice = gauge.getDefaultSlice().setInterval(pen.lightningCharts.option.min || 0, pen.lightningCharts.option.max || 100).setValue(data).setFillStyle(new SolidFill({
        color: ColorRGBA(colorArry[0], colorArry[1], colorArry[2])
      }));
      break;
  }
}
function destory3(pen) {
  if (pen.calculative.singleton && pen.calculative.singleton.div) {
    pen.calculative.singleton.div.remove();
    delete pen.calculative.singleton.div;
    delete pen.calculative.singleton.lightningChart;
  }
}
function move3(pen) {
  if (!pen.calculative.singleton.div) {
    return;
  }
  setElemPosition(pen, pen.calculative.singleton.div);
}
function resize3(pen) {
  if (!pen.calculative.singleton.div) {
    return;
  }
  setElemPosition(pen, pen.calculative.singleton.div);
}
function value3(pen) {
  if (!pen.calculative.singleton.div) {
    return;
  }
  setLightningCharts(pen);
  setElemPosition(pen, pen.calculative.singleton.div);
}
function onRenderPenRaw3(pen) {
  var _a;
  if (!((_a = pen.calculative) === null || _a === void 0 ? void 0 : _a.singleton)) {
    return;
  }
  var img = new Image();
  img.src = pen.calculative.singleton.div.children[0].toDataURL();
  pen.calculative.img = img;
}

// node_modules/@meta2d/chart-diagram/src/register.js
function register2(_echarts) {
  _echarts && (globalThis.echarts = _echarts);
  register({ echarts });
}
function registerHighcharts(_highcharts) {
  _highcharts && (globalThis.Highcharts = _highcharts);
  register({ highcharts });
}
function registerLightningChart(_lightningCharts) {
  _lightningCharts && (globalThis.lcjs = _lightningCharts);
  register({ lightningCharts });
}
export {
  ReplaceMode,
  echarts,
  highcharts,
  lightningCharts,
  register2 as register,
  registerHighcharts,
  registerLightningChart,
  setEchartsOption
};
//# sourceMappingURL=@meta2d_chart-diagram.js.map
