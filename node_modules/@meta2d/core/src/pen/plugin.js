// 该文件为penPlugin的相关文件
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * @description 闭包 重写 pen的生命周期，为了追加回调函数
 * @return 生命周期操作函数，可在原生命周期回调函数基础上进行执行多个函数，可通过传参，设置函数的增加和删除，类似addEventListener 和 removeEventListener
 * @bug 漏洞：后面的生命周期无法将前面的生命周期需要的参数正确传递
 */
function rewritePenLifeCycle() {
    var funcMap = null;
    var funcPenMap = new Map();
    return function (pen, lifeCycle, func, del) {
        if (del === void 0) { del = false; }
        if (funcPenMap.has(pen) && funcPenMap.get(pen)) {
            funcMap = funcPenMap.get(pen);
        }
        else {
            funcPenMap.set(pen, funcMap = new Map());
        }
        if (typeof func !== "function")
            return function () {
                console.warn('[rewritePenLifeCycle] warn: not a function ');
            };
        var funcListSet = new Set();
        var originFuncMap = new Map(); // 原始事件回调Map
        if (funcMap.has(lifeCycle) && funcMap.get(lifeCycle)) {
            funcListSet = funcMap.get(lifeCycle);
        }
        else {
            originFuncMap.set(lifeCycle, pen[lifeCycle]);
            funcMap.set(lifeCycle, funcListSet);
        }
        if (del) {
            funcListSet.delete(func);
        }
        else {
            funcListSet.add(func);
        }
        var originLifeCycle = originFuncMap.get(lifeCycle); // 原始事件;
        var rewriteFunc = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            originLifeCycle === null || originLifeCycle === void 0 ? void 0 : originLifeCycle.apply(void 0, __spreadArray([], __read(args), false));
            funcListSet.forEach(function (i) {
                // @ts-ignore
                i.apply(void 0, __spreadArray([], __read(args), false));
            });
        };
        pen[lifeCycle] = rewriteFunc;
    };
}
export var setLifeCycleFunc = rewritePenLifeCycle();
/**
 * @description 校验插件*/
export function validationPlugin(plugin) {
    // 校验penPlugin
    if (!plugin.name && !plugin.install) {
        console.error('installPenPlugin Error: Validation Failed');
        return false;
    }
    return true;
}
//# sourceMappingURL=plugin.js.map