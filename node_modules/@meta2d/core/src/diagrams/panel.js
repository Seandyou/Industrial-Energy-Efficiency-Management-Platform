import { movingSuffix } from '../canvas';
import { rectInRect } from '../rect';
import { deepClone } from '../utils';
export function panel(pen, ctx) {
    var path = !ctx ? new Path2D() : ctx;
    if (!pen.onDestroy) {
        pen.onDestroy = destory;
        pen.onMove = move;
        pen.onRotate = move;
        pen.onMouseEnter = mouseEnter;
        pen.onMouseLeave = mouseLeave;
        pen.onMouseMove = mouseMove;
        pen.onMouseUp = mouseUp;
        pen.onInput = input;
    }
    var wr = pen.calculative.borderRadius || 0, hr = wr;
    var _a = pen.calculative.worldRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, ex = _a.ex, ey = _a.ey;
    var textX = pen.calculative.worldTextRect.x;
    if (wr < 1) {
        wr = width * wr;
        hr = height * hr;
    }
    var r = wr < hr ? wr : hr;
    if (width < 2 * r) {
        r = width / 2;
    }
    if (height < 2 * r) {
        r = height / 2;
    }
    var textWidth = getTextWidth(pen.text, pen.calculative.fontSize);
    path.moveTo(x + r, y);
    path.lineTo(textX - 5, y);
    path.moveTo(textX + textWidth + 5, y);
    path.lineTo(textX + textWidth + 5, y);
    path.arcTo(ex, y, ex, ey, r);
    path.arcTo(ex, ey, x, ey, r);
    path.arcTo(x, ey, x, y, r);
    path.arcTo(x, y, ex, y, r);
    if (path instanceof Path2D) {
        return path;
    }
}
function getTextWidth(text, fontSize) {
    // 近似计算
    var chinese = text.match(/[^\x00-\xff]/g) || '';
    var chineseWidth = chinese.length * fontSize; // 中文占用的宽度
    var spaces = text.match(/\s/g) || '';
    var spaceWidth = spaces.length * fontSize * 0.3; // 空格占用的宽度
    var otherWidth = (text.length - chinese.length - spaces.length) * fontSize * 0.6; // 其他字符占用的宽度
    var currentWidth = chineseWidth + spaceWidth + otherWidth;
    return currentWidth;
}
function input(pen, text) {
    pen.text = text;
    pen.calculative.text = pen.text;
    // this.inputDiv.dataset.penId = undefined;
    pen.calculative.canvas.updatePenRect(pen);
    // this.patchFlags = true;
    // this.store.emitter.emit('valueUpdate', pen);
}
function destory(pen) { }
function move(pen) { }
function mouseEnter(pen) {
    // const activePens = pen.calculative.canvas.store.active;
    // if(activePens&&activePens.length){
    //   activePens.forEach((activePen:Pen)=>{
    //     if(rectInRect(activePen.calculative.worldRect,pen.calculative.worldRect,true)){
    //       if(!pen.followers){
    //         pen.followers =[];
    //       }
    //       if(!pen.followers.includes(activePen.id)){
    //         pen.followers.push(activePen.id);
    //       }
    //     }
    //   })
    // }
}
function mouseLeave(pen) {
    var activePens = pen.calculative.canvas.store.active;
    if (activePens && activePens.length) {
        activePens.forEach(function (activePen) {
            // if(!rectInRect(activePen.calculative.worldRect,pen.calculative.worldRect,true)){
            //   if(!pen.followers){
            //     pen.followers =[];
            //   }
            //   if(!pen.followers.includes(activePen.id)){
            //     pen.followers.push(activePen.id);
            //   }
            // }
            if (pen.followers) {
                var idx = pen.followers.findIndex(function (id) { return id === activePen.id; });
                if (idx !== -1) {
                    var movingPen = pen.calculative.canvas.store.pens[activePen.id + movingSuffix];
                    if (movingPen && movingPen.calculative) {
                        var isIn = rectInRect(movingPen.calculative.worldRect, pen.calculative.worldRect, true);
                        if (!isIn) {
                            pen.followers.splice(idx, 1);
                        }
                    }
                }
            }
        });
    }
}
function mouseUp(pen) {
    var activePens = pen.calculative.canvas.store.active;
    if (activePens && activePens.length) {
        activePens.forEach(function (activePen) {
            var movingPen = pen.calculative.canvas.store.pens[activePen.id + movingSuffix];
            if (movingPen && movingPen.calculative) {
                var inRect = deepClone(pen.calculative.worldRect);
                inRect.x -= 1;
                inRect.y -= 1;
                inRect.width += 2;
                inRect.height += 2;
                if (rectInRect(movingPen.calculative.worldRect, inRect, true)) {
                    if (!pen.followers) {
                        pen.followers = [];
                    }
                    if (!pen.followers.includes(activePen.id)) {
                        pen.followers.push(activePen.id);
                    }
                }
            }
        });
    }
}
function mouseMove(pen, e) {
    //  console.log(e,pen.calculative.canvas.store.active);
}
//# sourceMappingURL=panel.js.map