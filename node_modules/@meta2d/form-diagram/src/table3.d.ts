import { Pos, ReplaceMode } from './common';
import { Point } from '../../core/src/point';
import { Rect } from '../../core/src/rect';
import { Dropdown } from '../../core';
import { Pen } from '../../core';
export interface MergeCell {
    row: number;
    col: number;
    rowspan: number;
    colspan: number;
}
export interface Column {
    text: string;
    type: 'select' | 'numeric' | 'date' | 'time' | 'checkbox';
    dropdownList?: Dropdown[];
}
export interface TablePen extends Pen {
    rowHeaders?: boolean;
    colHeaders?: boolean;
    colPos?: number[];
    rowPos?: number[];
    tableWidth?: number;
    tableHeight?: number;
    bordered?: boolean;
    rowHeadersBackground?: string;
    rowHeadersColor?: string;
    vLine?: boolean;
    hLine?: boolean;
    stripe?: boolean;
    stripeColor?: string;
    /**
     * @deprecated 改用 colHeaders
     */
    hasHeader?: boolean;
    rowHeight?: number;
    colWidth?: number;
    maxNum?: number;
    fixedWidth?: boolean;
    colStyle?: any;
    offsetY?: number;
    swiper?: boolean;
    oldY?: number;
    row?: number;
    col?: number;
    interval?: any;
    styles?: {
        row?: number;
        col?: number;
        color?: string;
        background?: string;
        width?: number;
        height?: number;
        wheres?: {
            comparison?: string;
            key?: string;
            value?: string;
        }[];
        pens?: TablePen[];
    }[];
    data?: any;
    replaceMode?: ReplaceMode;
    calculative?: {
        maxOffsetY?: number;
        isUpdateData?: boolean;
        texts?: any[];
        activeRow?: number;
        activeCol?: number;
        activeCell?: Pos;
        hoverCell?: Pos;
        inputCell?: Pos;
        isInput?: boolean;
        isHover?: boolean;
        downPos?: {
            x: number;
            y: number;
        };
        stap?: number;
        startIndex?: number;
        endIndex?: number;
        mergeCell?: MergeCell;
    } & Pen['calculative'];
    initWorldRect?: Rect;
    isFirstTime?: boolean;
    initScale?: number;
    timer?: any;
    mergeCells?: MergeCell[];
    insertColLeft?: (index: number) => void;
    insertColRight?: (index: number) => void;
    deleteCol?: (index: number) => void;
    clearCol?: (index: number) => void;
    insertRowAbove?: (index: number) => void;
    insertRowBelow?: (index: number) => void;
    deleteRow?: (index: number) => void;
    clearRow?: (index: number) => void;
}
export declare function table3(ctx: CanvasRenderingContext2D, pen: TablePen): void;
export declare class TableContextMenu {
    options: {
        [key: string]: Array<{
            [key: string]: any;
        }>;
    };
    pen: TablePen;
    menu: HTMLElement;
    key: string;
    constructor(pen: TablePen);
    init(): void;
    updateMenu(key: string, e: Point): void;
    setMenuList(): void;
    hide(): void;
    insertColLeft: (colIndex: number) => void;
    insertColRight: (colIndex: number) => void;
    deleteCol: (colIndex: number) => void;
    clearCol: (colIndex: number) => void;
    insertRowAbove: (rowIndex: number) => void;
    insertRowBelow: (rowIndex: number) => void;
    deleteRow: (rowIndex: number) => void;
    clearRow: (rowIndex: number) => void;
    clearCells: () => void;
    cancelMerge: () => void;
    mergeCell: () => void;
    destroy(): void;
}
export declare class TableScroll {
    pen: TablePen;
    h: HTMLElement;
    w: HTMLElement;
    isDownH: number;
    isDownW: number;
    scrollLength: number;
    constructor(pen: TablePen);
    init(): void;
    updataScroll(): void;
    updataScrollHTop(): void;
    hideScroll(): void;
    showScroll(): void;
    private onMouseMove;
    private onMouseUp;
    destroy(): void;
}
